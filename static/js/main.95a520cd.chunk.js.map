{"version":3,"sources":["components/button.tsx","containers/buttons.tsx","components/display.tsx","containers/calculator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","id","className","label","Buttons","Display","input","Calculator","React","currentInput","setCurrentInput","onButtonClicked","number","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.95a520cd.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport './button.scss'\r\n\r\nexport interface ButtonProps {\r\n    id: string;\r\n    label: string | number\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = props => {\r\n    return <button id={props.id} className=\"button\">{props.label}</button>\r\n}\r\n\r\nexport default Button\r\n","import * as React from 'react'\r\nimport './buttons.scss'\r\nimport Button from '../components/button'\r\n\r\nexport interface ButtonsProps {\r\n    onButtonClicked(number: number | string): void\r\n}\r\n\r\nconst Buttons: React.FC<ButtonsProps> = props => {\r\n    return (\r\n        <div className=\"buttons__container\">\r\n            <Button id=\"seven\" label={7} />\r\n            <Button id=\"eight\" label={8} />\r\n            <Button id=\"nine\" label={9} />\r\n            <br />\r\n            <Button id=\"four\" label={4} />\r\n            <Button id=\"five\" label={5} />\r\n            <Button id=\"six\" label={6} />\r\n            <br />\r\n            <Button id=\"one\" label={1} />\r\n            <Button id=\"two\" label={2} />\r\n            <Button id=\"three\" label={3} />\r\n            <br />\r\n            <Button id=\"zero\" label={0} />\r\n            <Button id=\"decimal\" label=\".\" />\r\n            <Button id=\"equals\" label=\"=\" />\r\n            <br />\r\n            <Button id=\"clear\" label=\"C\" />\r\n            <Button id=\"divide\" label=\"/\" />\r\n            <Button id=\"multiply\" label=\"*\" />\r\n            <Button id=\"subtract\" label=\"-\" />\r\n            <Button id=\"add\" label=\"+\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons\r\n","import * as React from 'react'\r\nimport './display.scss'\r\n\r\nexport interface DisplayProps {\r\n    input?: any\r\n}\r\n\r\nconst Display: React.FC<DisplayProps> = props => {\r\n    return (\r\n        <div id=\"display\" className=\"calculator__display\">\r\n            <div className=\"calculator__display--input\">{props.input}</div>\r\n            <div className=\"calculator__display--output\">output</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display\r\n","import * as React from 'react'\r\nimport './calculator.scss'\r\nimport Buttons from './buttons'\r\nimport Display from '../components/display'\r\n\r\nexport interface CalculatorProps {}\r\n\r\nconst Calculator: React.FC = (props: CalculatorProps) => {\r\n    const [currentInput, setCurrentInput] = React.useState<number>(0)\r\n\r\n    const onButtonClicked = (number: number) => {\r\n        setCurrentInput(number)\r\n    }\r\n\r\n    return (\r\n        <div className=\"calculator__container\">\r\n            <Display input={currentInput} />\r\n            <Buttons onButtonClicked={onButtonClicked} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator\r\n","import React from 'react'\nimport './App.scss'\nimport Calculator from './containers/calculator'\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Calculator />\n            </header>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}